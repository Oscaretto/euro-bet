// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.zomtec.em2012.domain;

import eu.zomtec.em2012.domain.Game;
import eu.zomtec.em2012.domain.GameDataOnDemand;
import eu.zomtec.em2012.domain.GameGroup;
import eu.zomtec.em2012.domain.GameGroupDataOnDemand;
import eu.zomtec.em2012.domain.GameStatus;
import eu.zomtec.em2012.domain.Team;
import eu.zomtec.em2012.domain.TeamDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GameDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GameDataOnDemand: @Component;
    
    private Random GameDataOnDemand.rnd = new SecureRandom();
    
    private List<Game> GameDataOnDemand.data;
    
    @Autowired
    private GameGroupDataOnDemand GameDataOnDemand.gameGroupDataOnDemand;
    
    @Autowired
    private TeamDataOnDemand GameDataOnDemand.teamDataOnDemand;
    
    public Game GameDataOnDemand.getNewTransientGame(int index) {
        Game obj = new Game();
        setGameGroup(obj, index);
        setGameStatus(obj, index);
        setKickOff(obj, index);
        setLastScoreUpdate(obj, index);
        setScoreAway(obj, index);
        setScoreHome(obj, index);
        setTeamAway(obj, index);
        setTeamHome(obj, index);
        return obj;
    }
    
    public void GameDataOnDemand.setGameGroup(Game obj, int index) {
        GameGroup gameGroup = gameGroupDataOnDemand.getRandomGameGroup();
        obj.setGameGroup(gameGroup);
    }
    
    public void GameDataOnDemand.setGameStatus(Game obj, int index) {
        GameStatus gameStatus = GameStatus.class.getEnumConstants()[0];
        obj.setGameStatus(gameStatus);
    }
    
    public void GameDataOnDemand.setKickOff(Game obj, int index) {
        Date kickOff = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setKickOff(kickOff);
    }
    
    public void GameDataOnDemand.setLastScoreUpdate(Game obj, int index) {
        Date lastScoreUpdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastScoreUpdate(lastScoreUpdate);
    }
    
    public void GameDataOnDemand.setScoreAway(Game obj, int index) {
        Integer scoreAway = new Integer(index);
        obj.setScoreAway(scoreAway);
    }
    
    public void GameDataOnDemand.setScoreHome(Game obj, int index) {
        Integer scoreHome = new Integer(index);
        obj.setScoreHome(scoreHome);
    }
    
    public void GameDataOnDemand.setTeamAway(Game obj, int index) {
        Team teamAway = teamDataOnDemand.getRandomTeam();
        obj.setTeamAway(teamAway);
    }
    
    public void GameDataOnDemand.setTeamHome(Game obj, int index) {
        Team teamHome = teamDataOnDemand.getRandomTeam();
        obj.setTeamHome(teamHome);
    }
    
    public Game GameDataOnDemand.getSpecificGame(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Game obj = data.get(index);
        Long id = obj.getId();
        return Game.findGame(id);
    }
    
    public Game GameDataOnDemand.getRandomGame() {
        init();
        Game obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Game.findGame(id);
    }
    
    public boolean GameDataOnDemand.modifyGame(Game obj) {
        return false;
    }
    
    public void GameDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Game.findGameEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Game' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Game>();
        for (int i = 0; i < 10; i++) {
            Game obj = getNewTransientGame(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
