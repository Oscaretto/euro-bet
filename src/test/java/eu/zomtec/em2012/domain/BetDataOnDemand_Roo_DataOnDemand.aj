// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.zomtec.em2012.domain;

import eu.zomtec.em2012.domain.Bet;
import eu.zomtec.em2012.domain.BetDataOnDemand;
import eu.zomtec.em2012.domain.BetScoreType;
import eu.zomtec.em2012.domain.BetStatus;
import eu.zomtec.em2012.domain.BetUser;
import eu.zomtec.em2012.domain.BetUserDataOnDemand;
import eu.zomtec.em2012.domain.Game;
import eu.zomtec.em2012.domain.GameDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BetDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BetDataOnDemand: @Component;
    
    private Random BetDataOnDemand.rnd = new SecureRandom();
    
    private List<Bet> BetDataOnDemand.data;
    
    @Autowired
    private BetUserDataOnDemand BetDataOnDemand.betUserDataOnDemand;
    
    @Autowired
    private GameDataOnDemand BetDataOnDemand.gameDataOnDemand;
    
    public Bet BetDataOnDemand.getNewTransientBet(int index) {
        Bet obj = new Bet();
        setBetStatus(obj, index);
        setBetUser(obj, index);
        setGame(obj, index);
        setLastBetCalculation(obj, index);
        setLastBetChange(obj, index);
        setScore(obj, index);
        setScoreAway(obj, index);
        setScoreHome(obj, index);
        setScoreType(obj, index);
        return obj;
    }
    
    public void BetDataOnDemand.setBetStatus(Bet obj, int index) {
        BetStatus betStatus = BetStatus.class.getEnumConstants()[0];
        obj.setBetStatus(betStatus);
    }
    
    public void BetDataOnDemand.setBetUser(Bet obj, int index) {
        BetUser betUser = betUserDataOnDemand.getRandomBetUser();
        obj.setBetUser(betUser);
    }
    
    public void BetDataOnDemand.setGame(Bet obj, int index) {
        Game game = gameDataOnDemand.getRandomGame();
        obj.setGame(game);
    }
    
    public void BetDataOnDemand.setLastBetCalculation(Bet obj, int index) {
        Date lastBetCalculation = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastBetCalculation(lastBetCalculation);
    }
    
    public void BetDataOnDemand.setLastBetChange(Bet obj, int index) {
        Date lastBetChange = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastBetChange(lastBetChange);
    }
    
    public void BetDataOnDemand.setScore(Bet obj, int index) {
        Integer score = new Integer(index);
        obj.setScore(score);
    }
    
    public void BetDataOnDemand.setScoreAway(Bet obj, int index) {
        Integer scoreAway = new Integer(index);
        obj.setScoreAway(scoreAway);
    }
    
    public void BetDataOnDemand.setScoreHome(Bet obj, int index) {
        Integer scoreHome = new Integer(index);
        obj.setScoreHome(scoreHome);
    }
    
    public void BetDataOnDemand.setScoreType(Bet obj, int index) {
        BetScoreType scoreType = BetScoreType.class.getEnumConstants()[0];
        obj.setScoreType(scoreType);
    }
    
    public Bet BetDataOnDemand.getSpecificBet(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Bet obj = data.get(index);
        Long id = obj.getId();
        return Bet.findBet(id);
    }
    
    public Bet BetDataOnDemand.getRandomBet() {
        init();
        Bet obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Bet.findBet(id);
    }
    
    public boolean BetDataOnDemand.modifyBet(Bet obj) {
        return false;
    }
    
    public void BetDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Bet.findBetEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Bet' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Bet>();
        for (int i = 0; i < 10; i++) {
            Bet obj = getNewTransientBet(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
